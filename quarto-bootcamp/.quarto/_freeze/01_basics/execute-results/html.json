{
  "hash": "4b2bdc7036c77cb225b40eb174f93c0b",
  "result": {
    "markdown": "---\ntitle: \"Quarto Basics\"\n---\n\n\n\n\n## What is Quarto?  \n\nTODO \nrmd > qmd\nthis course is intermediate. lots more it can do\n\n\n## Why use Quarto?\n\nQuarto documents combine the analytical power of R and the utility of a text-processor. \nWe can have one document which contains all of our analysis as well as our written text, and can be _compiled_ into a nicely formatted report. This saves us doing analysis in R and copying results across to Microsoft Word. It ensures our report accurately reflects our analysis. Everything that you're reading now has all been written in Quarto!\n\nThe fundamental idea of Quarto is to be able to write normal text interspersed with \"code-chunks\" (i.e., chunks of code!). With Quarto documents we are able to see and edit the code along with specifying formatting of our text. We then __compile__ our document into a nice file (e.g. a __.pdf__ file or a __.html__ file) which formats our text and shows/hides code and output according to what we have specified.  \n\nYou can see a Quarto workflow in @fig-workflow\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![RMarkdown Workflow (from https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf)](images/rmdworkflow.png){#fig-workflow fig-align='center' width=836}\n:::\n:::\n\n\n\n<!-- ## Knitting a script -->\n\n<!-- To show the general process of going from something that we edit and evaluate in R using RStudio, to something more like a read-only document, it is worth first exploring how we can turn any R script into an __.html__ or __.pdf__  -->\n\n<!-- Step 1. Find an R script on your computer that runs from start to finish without any errors. If you don't have one to hand, you can download an example script from here: [TODO link]()   -->\n<!-- Step 2. Know *where* on your computer that document is.   -->\n<!-- Step 3. In the **console**, type `knitr::spin(\"insert-your-filepath-here.R\")` and press enter.   -->\n\n\n## Prerequisite packages  \n\nPrior to starting, we need to make sure we have all the required packages installed. \nRun these two lines in your console. It may take some time, so be patient. \nThe rmarkdown and knitr packages are going to be necessary for rendering any RMarkdown document. To enable us to compile to a PDF, we're going to need the tinytex package, and we're going to need to use it to install a minimal version of LaTeX on our system:  \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstall.packages(c(\"rmarkdown\",\"tinytex\",\"knitr\"))\ntinytex::install_tinytex()\n```\n:::\n\n\n## My first Quarto doc\n\nFirst things first, we need to open an RMarkdown document.  \n\nIn the top menu bar, click on **File > New File > RMarkdown**  \nA dialgue box will pop-up \n\n<center>\n__Creating a new RMarkdown doc__  \n<video width=\"320\" height=\"240\" controls>\n  <source src=\"vids/newrmd.mp4\" type=\"video/mp4\">\n</video></center>\n\n## yaml\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The bit between three dashes is the `YAML`, and contains metadata about the document](images/yaml.png){fig-align='center' width=198}\n:::\n:::\n\n\nThe bit at the top of your document between the three dashes `---` is the *\"metadata\"*. This is the information **about** your document. Things like the title, author, output format (html/pdf). For now, we can leave it as it is, but there are lots and lots of features you can exploit via the yaml, such as including stylesheets for html (which is how we set the colours/fonts etc in these pages), to setting custom parameters which enable you to bulk create multiple reports for different values (e.g. a different report on each country in a list). We won't cover this sort of stuff in this course as it is not so useful for producing scientific reports, but once you are an RMarkdown pro, if you get interested in this sort of thing there is lots of info at https://bookdown.org/yihui/rmarkdown/params-knit.html.  \n\nWe will come back to editing the yaml a little bit in [Lesson 7](07-refs.html), but for now we can leave it as it is, having been automatically generated based on the author and title we gave the little pop-up box. \n\n## Remove the template text\n\nWhen you open a new RMarkdown document, it opens a template for you, to help with learning how to use it. \nRead through the template, and follow along with the video to delete all of it - we want to start fresh:\n\n<center>\n__Removing the template__  \n<video width=\"320\" height=\"240\" controls>\n  <source src=\"vids/template.mp4\" type=\"video/mp4\">\n</video></center>\n\n## Text and Code-Chunks\n\n\n::: {.panelset}\n\n::: {.panel}\n#### Writing Text \n\nAs mentioned, RMarkdown is a format in which we can write both code **and** text. It has lots of useful advantages - you can write in such a way that if your data or analysis changes, then your results, plots and tables will automatically update to reflect these changes. \n\nWriting text involves formatting your words in plain-text \"markdown\". There are a few rules to get to grips with, but it is fairly straightforward to start typing your paragraph in your document:  \n\n- We use the # symbol to denote a section heading (with ## being a subsection, and ### being subsubsection, and so on.)  \n- Bold text is made by wrapping a sentence in two asterisks `**`, or two underscores `__`\n- italic text is made by wrapping it in one `*` or `_`. \n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Writing in Markdown (from https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf)](images/md.png){fig-align='center' width=700px}\n:::\n:::\n\n\n:::\n\n::: {.panel}\n#### Adding Code-Chunks  \n\nAs shown in Figure \\@ref(fig:chunk), We include code-chunks by using three backticks ``` followed by squiggly brackets with \"r\" in them {r}, to specify in the document that this is R code (we can actually also include other programming languages!). We then end the code chunk with three backticks again. Everything between these backticks will get evaluated as a chunk of R code, and things outside these chunks will be considered text. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![This is a code-chunk](images/chunk.png){fig-align='center' width=700px}\n:::\n:::\n\n\nThere are a couple of short cuts for adding a new code-chunk. Either of the options below will create a code-chunk wherever your cursor is in the document at that time. \n\n1. At the top-right of your document, there will be a set of icons. One of these is a little \"c\" inside a box with a plus in the corner. Click this and choose R from the menu.  \n\n    ::: {.cell layout-align=\"left\"}\n    ::: {.cell-output-display}\n    ![](images/chunkicon.png){fig-align='left' width=75px}\n    :::\n    :::\n\n2. Type **Ctrl+Alt+i** on your keyboard ( **Cmd+Opt+i** for Mac).\n\n\n\n:::\n\n:::\n\n<center>\n__Writing text__  \n<video width=\"320\" height=\"240\" controls><source src=\"vids/writing.mp4\" type=\"video/mp4\">\n</video></center>  \n\n<center>\n__Adding code-chunks__  \n<video width=\"320\" height=\"240\" controls><source src=\"vids/newcodechunk.mp4\" type=\"video/mp4\">\n</video></center>\n\n\n## Running Code \n\nThere are various ways you can send code from your RMarkdown document to the console to be evaluated.  \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Running code chunks](images/chunk2.png){fig-align='center' width=700px}\n:::\n:::\n\n\n#### Running the line of code under the cursor\n\nAs with an R Script, when your cursor is on a line of R code, you can type __Ctrl+Enter__ ( __Cmd+Enter__ for Mac users) to evaluate that line of code. The cursor will automatically move down to the next line of code, so you can keep pressing your keyboard to run lines sequentially. Alternatively, in the top-right of your document you can press the run icon and choose to run the selected line.  \n \n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](images/runicon.png){fig-align='left' width=100px}\n:::\n:::\n\n\n<center>\n__Running a line of code__  \n<video width=\"320\" height=\"240\" controls>\n  <source src=\"vids/runcode.mp4\" type=\"video/mp4\">\n</video></center>\n\nYou can also highlight lines to run them together. \n\n\n\n\n#### Running a chunk of code\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](images/runchunkicon.png){fig-align='left' width=50px}\n:::\n:::\n\nThe little green arrow at the top right of the code-chunk allows you to run that whole code-chunk. \n\n<center>\n__Running current code-chunk__  \n<video width=\"320\" height=\"240\" controls>\n  <source src=\"vids/runchunk.mp4\" type=\"video/mp4\">\n</video></center>\n\n#### Running all code-chunks above the current code-chunk\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](images/runaboveicon.png){fig-align='left' width=50px}\n:::\n:::\n\nThe little downwards arrow enables you to run all the code-chunks above that code-chunk. This is useful to do a quick refresh of your analysis process up to that point. \n\n<center>\n__Running code-chunks above__  \n<video width=\"320\" height=\"240\" controls>\n  <source src=\"vids/runabove.mp4\" type=\"video/mp4\">\n</video></center>\n\n# Saving progress\n\n\n:::imp\n\nDon't forget to save your document!!  \n\n\n<center>\n__Saving your file__  \n<video width=\"320\" height=\"240\" controls>\n  <source src=\"vids/save.mp4\" type=\"video/mp4\">\n</video></center>\n\n:::\n\n",
    "supporting": [
      "01_basics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/panelset-0.2.6/panelset.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/panelset-0.2.6/panelset.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}