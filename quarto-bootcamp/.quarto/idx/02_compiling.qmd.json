{"title":"Compiling RMarkdown Documents","markdown":{"yaml":{"title":"Compiling RMarkdown Documents"},"headingText":"What does it mean to \"compile\" a document?","containsRefs":false,"markdown":"\n\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(fig.align = 'center')\n```\n\n```{r panelset, echo=FALSE}\nxaringanExtra::use_panelset()\n```\n\n\n```{css echo=FALSE}\n.spc1{\n  background-color: #eaeaea;\n}\n.frame {\n    border: 1px solid #333333 !important; \n    border-radius: 5px; \n    padding: 20px 20px 10px 20px; \n    margin-top: 20px; \n    margin-bottom: 20px; \n}\n.imp{\n  border-left: 5px solid #FF3131;\n  padding: 20px 20px 10px 20px; \n  margin-top: 20px; \n  margin-bottom: 20px; \n}\n```\n\n\n```{r render, echo=FALSE, fig.cap=\"Rendering (from https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf)\"}\nknitr::include_graphics(\"images/render.png\")\n```\n\nOften, when talking about \"compiling\" RMarkdown documents, you will find different words used for this process, such as \"compiling\", \"rendering\", and \"knitting\".  \n\nThe basic idea is that we are turning the **.rmd** file we are editing in RStudio into something much more reader-friendly, such as a **.pdf**, or an **.html**, or even a word file **.docx**. \n\n```{r echo=F, fig.align=\"left\", out.width=\"75px\"}\nknitr::include_graphics(\"images/kniticon.png\")\n```\nIf you open up the **.rmd** file from [Lesson 1](01-basics.html), and click the \"knit\" icon at the top of the document, you see lots of stuff happening below, and then a nicely formatted document will pop-up. \n(**Note:** If you have not already saved your RMarkdown document (hopefully you have!), then when you click \"knit\", it will prompt you to save it first.)\n\n<center>\n__Compiling a document__  \n<video width=\"320\" height=\"240\" controls>\n  <source src=\"vids/knit1.mp4\" type=\"video/mp4\">\n</video></center>\n\n:::rtip\nYou may find that the document pops up in a separate window, or in the \"viewer\" pane in the bottom right of RStudio.  \nYou can control this behaviour by looking in the top menu of RStudio for __\"Tools\" > \"Global Options\" > \"RMarkdown\" > \"Show output preview in:\"__. \n\n:::\n\n## Compiled Files\n\nThe compiled file will be in the same folder as where you have saved your __.rmd__ file. If you are using an \"Project\", or have set your working directory using `setwd()` (see [r-bootcamp Lesson 2](https://uoepsy.github.io/r-bootcamp/02-data.html#directories)) then you can fine these easily in the Files tab of RStudio. You can also find these in your file-browser that you use to find all your other files on your computer.\n\n<center>\n__Locating .rmd and compiled document when using a Project__  \n<video width=\"320\" height=\"240\" controls>\n  <source src=\"vids/files.mp4\" type=\"video/mp4\">\n</video></center>\n\n\nYou should now have **TWO** files on your computer with the same name but one is an **.Rmd** and one is a **.html**. You could email the **.html** file to someone and they could open it in their web browser. The **.Rmd** file can only be opened and understood by someone who has access to R. \n\n## Compiling and Sessions/Environments\n\n:::imp\nWhen an RMarkdown document gets compiled, it does so as a __self-contained process.__ This ensures reproducibility! \n\nIt doesn't matter what you can see in your Environment, nor what packages you have loaded.  \nWhat matters is what is __in__ the RMarkdown document.  \n\nWhen you click \"knit\", the lines of code in your RMarkdown document will be evaluated one-by-one, and the document must contain __everything__ required to evaluate each line.  \n\nFor example:\n\n- if you have not got a line _in your document_ that loads the tidyverse packages, then you will not be able to use functions like `group_by()`,`filter`,`%>%` etc in the document, because it won't know where to find them.  \n- if you have not got the line that loads the tidyverse packages __before__ you use functions like `group_by()`,`filter`,`%>%` etc, then it won't know where to find them. \n\nWhere is the RMarkdown looking for objects/functions, if not your environment? It's looking in its own environment! \n\n:::\n\n<center>\n__Demonstration of compiling without defining objects__  \n<video width=\"320\" height=\"240\" controls>\n  <source src=\"vids/compilingenv.mp4\" type=\"video/mp4\">\n</video></center>\n\n## The \"setup\" chunk\n\nBecause compiling an RMarkdown document requires everything necessary for all the code to run __without errors__ to be included in the document and in the correct order, there is an optimum way to structure your document.  \nImmediately after the metadata (title, author etc), we specify the \"setup\" chunk (see below). \nIn the setup chunk, we typically load __all__ the packages we rely on in the rest of the document, so that they get loaded first.^[Don't use `install.packages()` here - or it will re-install the package every time you compile. Just use `install.packages()` in the console.] It is also typical to use this chunk to read in your data.  \nYou can see an example below. \n\n\n:::frame\n\n```{}\n---\ntitle: \"this is my title\"\nauthor: \"I am the author\"\ndate: \"13/08/2021\"\noutput: html_document\n---\n```\n<div class=\"spc1\"><code>\n&grave;&grave;&grave;{r setup, include = FALSE}<br>\nlibrary(tidyverse)<br>\nlibrary(palmerpenguins)<br>\nsomedata <- read_csv(\"https://edin.ac/2wJgYwL\")<br> \n&grave;&grave;&grave;\n</code></div>\n\n:::\n\n:::imp\n\nNote we now have some more stuff inside the brackets which start our code-chunk.  \nInstead of \n<div class=\"spc1\"><code>&grave;&grave;&grave;{r}</code></div>\nwe now have \n<div class=\"spc1\"><code>&grave;&grave;&grave;{r setup, include = FALSE}</code></div>\nThe first bit, `setup` is simply the name of our code-chunk. \nWe can call it anything we want, for instance:  \n<div class=\"spc1\"><code>&grave;&grave;&grave;{r peppapig}</code></div>\nThe second bit, the `include = FALSE` is what is known as a \"chunk-option\", and we will get to these later on. What this does is basically mean that neither this chunk of code nor its output will be visible in the compiled document. \n:::\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"02_compiling.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","theme":"journal","title":"Compiling RMarkdown Documents"},"extensions":{"book":{"multiFile":true}}}}}